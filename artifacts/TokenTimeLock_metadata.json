{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ID",
						"type": "uint256"
					}
				],
				"name": "Locked",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "Token",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "Beneficiary",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "liquidity",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "FirstPercent",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "firstReleaseTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "cyclePercent",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "cyclereleaseTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "cycleCount",
								"type": "uint256"
							}
						],
						"internalType": "struct TokenTimeLock.inputs",
						"name": "Inputs",
						"type": "tuple"
					}
				],
				"name": "Lock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "LockedTokens",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "Token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "Beneficiary",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "releaseTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "liquidity",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "Claimed",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "Release",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "_vestingClaim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "Id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "amount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vIndex",
						"type": "uint256"
					}
				],
				"name": "beneficiary",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newCycleGap",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "newPercentages",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "additionalAmount",
						"type": "uint256"
					}
				],
				"name": "changeReleaseTimeAndSpread",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "cycleCountPerID",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vIndex",
						"type": "uint256"
					}
				],
				"name": "getClaimed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getLockCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vIndex",
						"type": "uint256"
					}
				],
				"name": "getTransaction",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "Token",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "Beneficiary",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "releaseTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "liquidity",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "Claimed",
								"type": "bool"
							}
						],
						"internalType": "struct TokenTimeLock.Locks",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "id",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vIndex",
						"type": "uint256"
					}
				],
				"name": "isLiquidity",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "beneficiary_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "releaseTime_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount_",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_liquidity",
						"type": "bool"
					}
				],
				"name": "launchLock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vIndex",
						"type": "uint256"
					}
				],
				"name": "releaseTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vIndex",
						"type": "uint256"
					}
				],
				"name": "token",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "totalTokenAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "PurpleSale",
			"events": {
				"Locked(address,address,uint256)": {
					"details": "Emitted when a new lock is created.",
					"params": {
						"ID": "The ID of the lock.",
						"token": "The address of the token that was locked.",
						"user": "The address of the user who created the lock."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"Lock((address,address,uint256,bool,uint256,uint256,uint256,uint256,uint256))": {
					"details": "This function transfers tokens from the sender to this contract, creates a new lock, and emits a Locked event.",
					"params": {
						"Inputs": "A struct containing the following fields: - `Token`: The address of the token to be locked. - `Beneficiary`: The address of the beneficiary of the lock. - `amount`: The amount of tokens to be locked. - `liquidity`: A boolean indicating whether the lock is a liquidity token. - `Vesting`: A boolean indicating whether the lock has vested cycles. - `FirstPercent`: The percentage of tokens to be released first. - `firstReleaseTime`: The unix timestamp when the first release can be made. - `cyclePercent`: The percentage of tokens to be released in each cycle. - `cyclereleaseTime`: The time interval between each release cycle. - `cycleCount`: The number of release cycles."
					}
				},
				"Release(uint256)": {
					"details": "This function checks the vesting schedule and calls the appropriate claim function.",
					"params": {
						"index": "The index of the lock."
					}
				},
				"_vestingClaim(uint256)": {
					"details": "This function checks the claim status and release time for each vesting cycle, then transfers the claimable tokens to the beneficiary.This function seems to fail when called if declared as internal, still unsure why",
					"params": {
						"index": "The index of the lock."
					}
				},
				"amount(address,uint256,uint256)": {
					"params": {
						"Id": "The ID of the lock.",
						"index": "The index of the lock.",
						"owner_": "The address of the owner of the lock."
					},
					"returns": {
						"_0": "The amount of tokens."
					}
				},
				"beneficiary(address,uint256,uint256)": {
					"params": {
						"index": "The ID of the lock.",
						"owner_": "The address of the owner of the lock.",
						"vIndex": "The index of the lock."
					},
					"returns": {
						"_0": "The beneficiary address."
					}
				},
				"changeReleaseTimeAndSpread(uint256,uint256,uint256,uint256[],uint256)": {
					"details": "This function changes the first release time, the time gap between each release cycle, and the amount of tokens for each cycle of a vesting lock based on the new time, time gap, and percentages provided. It does this by iterating over each cycle of the lock and setting the new release time and amount of tokens for that cycle based on the new time gap and percentages provided.",
					"params": {
						"index": "The index of the lock.",
						"newCycleGap": "The new time gap between each release cycle.",
						"newPercentages": "An array of new percentages for each cycle of the lock. The percentages are expressed as parts per 10,000 (i.e., a value of 10000 represents 100%).",
						"newTime": "The new first release time."
					}
				},
				"getClaimed(address,uint256,uint256)": {
					"params": {
						"index": "The ID of the lock.",
						"owner_": "The address of the owner of the lock.",
						"vIndex": "The index of the lock."
					},
					"returns": {
						"_0": "The claimed status."
					}
				},
				"getLockCount(address,uint256)": {
					"details": "This function returns the count of locks associated with the provided owner and index.",
					"params": {
						"index": "The index of the lock.",
						"owner": "The address of the owner of the lock."
					},
					"returns": {
						"_0": "The number of locks for the given owner and index."
					}
				},
				"getTransaction(address,uint256,uint256)": {
					"params": {
						"index": "The ID of the lock.",
						"owner_": "The address of the owner of the lock.",
						"vIndex": "The index of the lock."
					},
					"returns": {
						"_0": "The lock details."
					}
				},
				"isLiquidity(address,uint256,uint256)": {
					"params": {
						"index": "The ID of the lock.",
						"owner_": "The address of the owner of the lock.",
						"vIndex": "The index of the lock."
					},
					"returns": {
						"_0": "The liquidity status."
					}
				},
				"launchLock(address,address,address,uint256,uint256,bool)": {
					"details": "This function transfers tokens from the PurpleSale presale cpntract  to this contract, creates a new lock, and emits a Locked event.",
					"params": {
						"_liquidity": "A flag indicating if the token is a liquidity token or not.",
						"amount_": "The amount of tokens to be locked.",
						"beneficiary_": "The address of the beneficiary of the lock.",
						"owner": "The address of the user who will own the lock.",
						"releaseTime_": "The timestamp when the lock will be released.",
						"token_": "The address of the token to be locked."
					}
				},
				"releaseTime(address,uint256,uint256)": {
					"params": {
						"index": "The ID of the lock.",
						"owner_": "The address of the owner of the lock.",
						"vIndex": "The index of the lock."
					},
					"returns": {
						"_0": "The release time."
					}
				},
				"token(address,uint256,uint256)": {
					"params": {
						"index": "The ID of the lock.",
						"owner_": "The address of the owner of the lock.",
						"vIndex": "The index of the lock."
					},
					"returns": {
						"_0": "The token address."
					}
				}
			},
			"title": "TokenTimeLock",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"Lock((address,address,uint256,bool,uint256,uint256,uint256,uint256,uint256))": {
					"notice": "Creates a new token lock.Function does not support tokens with fees or rebase tokens"
				},
				"LockedTokens(address,uint256,uint256)": {
					"notice": "Mapping of locked tokens for each user."
				},
				"Release(uint256)": {
					"notice": "Releases tokens based on the vesting schedule."
				},
				"_vestingClaim(uint256)": {
					"notice": "Claims tokens for a vesting lock."
				},
				"amount(address,uint256,uint256)": {
					"notice": "Returns the amount of tokens for a given lock."
				},
				"beneficiary(address,uint256,uint256)": {
					"notice": "Returns the beneficiary address for a given lock."
				},
				"changeReleaseTimeAndSpread(uint256,uint256,uint256,uint256[],uint256)": {
					"notice": "Changes the release time and token distribution percentages for each cycle of a vesting lock."
				},
				"cycleCountPerID(address,uint256)": {
					"notice": "Mapping of the number of vesting cycles for each lock ID"
				},
				"getClaimed(address,uint256,uint256)": {
					"notice": "Returns the claimed status for a given lock."
				},
				"getLockCount(address,uint256)": {
					"notice": "Retrieves the number of locks for a given owner and index."
				},
				"getTransaction(address,uint256,uint256)": {
					"notice": "Returns the lock details for a given owner, ID, and index."
				},
				"isLiquidity(address,uint256,uint256)": {
					"notice": "Returns the liquidity status for a given lock."
				},
				"launchLock(address,address,address,uint256,uint256,bool)": {
					"notice": "Called from the PurpleSale Presale contract to lock a liquidity token once the sale endsFunction does not support tokens with fees or rebase tokens"
				},
				"releaseTime(address,uint256,uint256)": {
					"notice": "Returns the release time for a given lock."
				},
				"token(address,uint256,uint256)": {
					"notice": "Returns the token address for a given lock."
				},
				"totalTokenAmount(uint256,address)": {
					"notice": "Mapping of the total token amount locked for an ID"
				}
			},
			"notice": "A contract for locking and releasing tokens based on vesting schedules.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Lock.sol": "TokenTimeLock"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Lock.sol": {
			"keccak256": "0x19181e1beeb6e8da6eacc62aef2c7828b04613d71b244682eb07ee81fedee8cb",
			"license": "MIT",
			"urls": [
				"bzz-raw://70bbec6ba114b3712620b856a7cb5f0b6d2b4b58c413349a6ca0046fadf09ccc",
				"dweb:/ipfs/QmPgQzzfSbuu2dw2vFutkYW5gyBr3vk63Atbz1f8Gx3VVE"
			]
		}
	},
	"version": 1
}